/**
 */
package pt.fct.unl.novalincs.useme.model.ContextModeling.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import pt.fct.unl.novalincs.useme.model.ContextModeling.util.ContextModelingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContextModelingItemProviderAdapterFactory extends ContextModelingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ContextModelingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.ContextSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextSpecificationItemProvider contextSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.ContextSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextSpecificationAdapter() {
		if (contextSpecificationItemProvider == null) {
			contextSpecificationItemProvider = new ContextSpecificationItemProvider(this);
		}

		return contextSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.UserProfileSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserProfileSpecificationItemProvider userProfileSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.UserProfileSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserProfileSpecificationAdapter() {
		if (userProfileSpecificationItemProvider == null) {
			userProfileSpecificationItemProvider = new UserProfileSpecificationItemProvider(this);
		}

		return userProfileSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.WorkflowSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowSpecificationItemProvider workflowSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.WorkflowSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowSpecificationAdapter() {
		if (workflowSpecificationItemProvider == null) {
			workflowSpecificationItemProvider = new WorkflowSpecificationItemProvider(this);
		}

		return workflowSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.EnviromentSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnviromentSpecificationItemProvider enviromentSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.EnviromentSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnviromentSpecificationAdapter() {
		if (enviromentSpecificationItemProvider == null) {
			enviromentSpecificationItemProvider = new EnviromentSpecificationItemProvider(this);
		}

		return enviromentSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.ContextModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextModelItemProvider contextModelItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.ContextModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextModelAdapter() {
		if (contextModelItemProvider == null) {
			contextModelItemProvider = new ContextModelItemProvider(this);
		}

		return contextModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.TechnicalEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TechnicalEnvironmentItemProvider technicalEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.TechnicalEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTechnicalEnvironmentAdapter() {
		if (technicalEnvironmentItemProvider == null) {
			technicalEnvironmentItemProvider = new TechnicalEnvironmentItemProvider(this);
		}

		return technicalEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.PhysicalEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalEnvironmentItemProvider physicalEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.PhysicalEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalEnvironmentAdapter() {
		if (physicalEnvironmentItemProvider == null) {
			physicalEnvironmentItemProvider = new PhysicalEnvironmentItemProvider(this);
		}

		return physicalEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.SocialEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SocialEnvironmentItemProvider socialEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.SocialEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSocialEnvironmentAdapter() {
		if (socialEnvironmentItemProvider == null) {
			socialEnvironmentItemProvider = new SocialEnvironmentItemProvider(this);
		}

		return socialEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.Workflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowItemProvider workflowItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.Workflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowAdapter() {
		if (workflowItemProvider == null) {
			workflowItemProvider = new WorkflowItemProvider(this);
		}

		return workflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.ContextEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextEnvironmentItemProvider contextEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.ContextEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextEnvironmentAdapter() {
		if (contextEnvironmentItemProvider == null) {
			contextEnvironmentItemProvider = new ContextEnvironmentItemProvider(this);
		}

		return contextEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.UserProfile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserProfileItemProvider userProfileItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.UserProfile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserProfileAdapter() {
		if (userProfileItemProvider == null) {
			userProfileItemProvider = new UserProfileItemProvider(this);
		}

		return userProfileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link pt.fct.unl.novalincs.useme.model.ContextModeling.UserHierarchy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserHierarchyItemProvider userHierarchyItemProvider;

	/**
	 * This creates an adapter for a {@link pt.fct.unl.novalincs.useme.model.ContextModeling.UserHierarchy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserHierarchyAdapter() {
		if (userHierarchyItemProvider == null) {
			userHierarchyItemProvider = new UserHierarchyItemProvider(this);
		}

		return userHierarchyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (contextSpecificationItemProvider != null) contextSpecificationItemProvider.dispose();
		if (userProfileSpecificationItemProvider != null) userProfileSpecificationItemProvider.dispose();
		if (workflowSpecificationItemProvider != null) workflowSpecificationItemProvider.dispose();
		if (enviromentSpecificationItemProvider != null) enviromentSpecificationItemProvider.dispose();
		if (contextModelItemProvider != null) contextModelItemProvider.dispose();
		if (technicalEnvironmentItemProvider != null) technicalEnvironmentItemProvider.dispose();
		if (physicalEnvironmentItemProvider != null) physicalEnvironmentItemProvider.dispose();
		if (socialEnvironmentItemProvider != null) socialEnvironmentItemProvider.dispose();
		if (workflowItemProvider != null) workflowItemProvider.dispose();
		if (contextEnvironmentItemProvider != null) contextEnvironmentItemProvider.dispose();
		if (userProfileItemProvider != null) userProfileItemProvider.dispose();
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (userHierarchyItemProvider != null) userHierarchyItemProvider.dispose();
	}

}
